"use strict";

let selectBox = document.querySelector(".select-box");
let selectPlayerX = selectBox.querySelector(".playerX");
let selectPlayerO = selectBox.querySelector(".playerO");

let playBox = document.querySelector(".play-box");
let play = document.querySelector(".btn-play");

let player = document.querySelector(".players");
let xTurn = document.querySelector(".Xturn");
let oTurn = document.querySelector(".Oturn");

let gameBoard = document.querySelector(".game-board");

let resultBox = document.querySelector(".result-box");
let wonText = resultBox.querySelector(".won-text");
let replay = resultBox.querySelector(".btn-replay");

let count = 0; // ƒê·∫øm s·ªë l·∫ßn click v√†o √¥
let sign, notSign;
let win = false;

// T·∫°o l∆∞·ªõi √¥ tr√≤ ch∆°i
const render = (row, column) => {
  let resume = "<table>";
  for (let i = 0; i < row; i++) {
    resume += "<tr>";
    for (let j = 0; j < column; j++) {
      resume += '<td class = "btn-box" id="1">';
      resume += "</td>";
    }
    resume += "</tr>";
  }
  resume += "</table>";
  return resume;
};

///////////////////////////////
// Khi ng∆∞·ªùi ch∆°i click v√†o n√∫t ch·ªçn ch∆°i qu√¢n X
selectPlayerX.addEventListener("click", function () {
  selectBox.classList.add("hidden"); //·∫®n h·ªôp ch·ªçn qu√¢n X/O
  playBox.classList.add("show"); // Hi·ªán giao di·ªán ch∆°i ch√≠nh
  xTurn.classList.add("active"); //
});

// Khi ng∆∞·ªùi ch∆°i click v√†o n√∫t ch·ªçn ch∆°i qu√¢n O
selectPlayerO.addEventListener("click", function () {
  selectBox.classList.add("hidden");
  playBox.classList.add("show");
  oTurn.classList.add("active");
});

///////////////////////////////////
// H√†m Play
const handlePlayClick = () => {
  let rows = Number(document.querySelector(".input-row").value);
  let columns = Number(document.querySelector(".input-column").value);

  if (!rows || !columns) alert("Ch∆∞a nh·∫≠p ƒë√∫ng s·ªë h√†ng v√† c·ªôt ‚õî");
  // Ki·ªÉm tra xem row v√† column nh·∫≠p v√†o c√≥ ph·∫£i s·ªë nguy√™n kh√¥ng
  else if (Number.isInteger(rows) && Number.isInteger(columns)) {
    if (rows >= 4 && columns >= 4 && rows <= 14 && columns <= 14) {
      document.querySelector(".game-board").innerHTML = render(rows, columns); // Th√™m l∆∞·ªõi tr√≤ ch∆°i v√†o play-box
      let allBox = document.querySelectorAll(".btn-box"); // allBox l√† t·∫≠p c√°c √¥

      for (let i = 0; i < allBox.length; i++) {
        // H√†m ki·ªÉm tra k·∫øt qu·∫£
        const check = () => {
          // Theo h√†ng ngang

          if (
            i % (columns - 1) !== 0 &&
            i % columns !== 0 &&
            i % (columns + 1) !== 0 &&
            allBox[i - 1]?.id === sign &&
            allBox[i + 1]?.id === sign &&
            ((allBox[i - 2]?.id === sign &&
              allBox[i + 2]?.id !== notSign &&
              allBox[i - 3]?.id !== notSign) ||
              (allBox[i - 2]?.id !== notSign &&
                allBox[i + 2]?.id === sign &&
                allBox[i + 3]?.id !== notSign))
          ) {
            {
              win = true;
            }
          } else if (
            i % columns !== 0 &&
            (i - 1) % columns !== 0 &&
            (i - 2) % columns !== 0 &&
            allBox[i - 1]?.id === sign &&
            allBox[i - 2]?.id === sign &&
            allBox[i - 3]?.id === sign &&
            allBox[i - 4]?.id !== notSign &&
            allBox[i + 1]?.id !== notSign
          ) {
            win = true;
          } else if (
            i % (columns - 1) !== 0 &&
            (i + 1) % (columns - 1) !== 0 &&
            (i + 2) % (columns - 1) !== 0 &&
            allBox[i + 1]?.id === sign &&
            allBox[i + 2]?.id === sign &&
            allBox[i + 3]?.id === sign &&
            allBox[i - 1]?.id !== notSign &&
            allBox[i + 4]?.id !== notSign
          ) {
            win = true;
          }

          // Theo h√†ng d·ªçc
          if (
            // Ch·ªçn cu·ªëi ·ªü gi·ªØa
            allBox[i - columns]?.id === sign &&
            allBox[i + columns]?.id === sign &&
            ((allBox[i - 2 * columns]?.id === sign &&
              allBox[i + 2 * columns]?.id !== notSign &&
              allBox[i - 3 * columns]?.id !== notSign) ||
              (allBox[i - 2 * columns]?.id !== notSign &&
                allBox[i + 2 * columns]?.id === sign &&
                allBox[i + 3 * columns]?.id !== notSign))
          ) {
            win = true;
          } else if (
            // Ch·ªçn cu·ªëi ·ªü d∆∞·ªõi
            allBox[i - columns]?.id === sign &&
            allBox[i - 2 * columns]?.id === sign &&
            allBox[i - 3 * columns]?.id === sign &&
            allBox[i - 4 * columns]?.id !== notSign &&
            allBox[i + columns]?.id != notSign
          ) {
            win = true;
          } else if (
            // Ch·ªçn cu·ªëi ·ªü tr√™n
            allBox[i + columns]?.id === sign &&
            allBox[i + 2 * columns]?.id === sign &&
            allBox[i + 3 * columns]?.id === sign &&
            allBox[i + 4 * columns]?.id !== notSign &&
            allBox[i - columns]?.id != notSign
          ) {
            win = true;
          }
          //Theo ƒë∆∞·ªùng ch√©o tr√™n tr√°i
          if (
            // Ch·ªçn cu·ªëi ·ªü gi·ªØa
            allBox[i - columns - 1]?.id === sign &&
            allBox[i + columns + 1]?.id === sign &&
            ((allBox[i - 2 * columns - 2]?.id === sign &&
              allBox[i + 2 * columns + 2]?.id !== notSign &&
              allBox[i - 3 * columns - 3]?.id !== notSign) ||
              (allBox[i + 2 * columns + 2]?.id === sign &&
                allBox[i - 2 * columns - 2]?.id !== notSign &&
                allBox[i + 3 * columns + 3]?.id !== notSign))
          ) {
            win = true;
          }
          // Ch·ªçn cu·ªëi ·ªü d∆∞·ªõi
          else if (
            allBox[i - columns - 1]?.id === sign &&
            allBox[i - 2 * columns - 2]?.id === sign &&
            allBox[i - 3 * columns - 3]?.id === sign &&
            allBox[i - 4 * columns - 4]?.id !== notSign &&
            allBox[i + columns + 1]?.id !== notSign
          ) {
            win = true;
          }
          // Ch·ªçn cu·ªëi ·ªü tr√™n
          else if (
            allBox[i + columns + 1]?.id === sign &&
            allBox[i + 2 * columns + 2]?.id === sign &&
            allBox[i + 3 * columns + 3]?.id === sign &&
            allBox[i + 4 * columns + 4]?.id !== notSign &&
            allBox[i - columns - 1]?.id !== notSign
          ) {
            win = true;
          }
          //Theo ƒë∆∞·ªùng ch√©o tr√™n ph·∫£i
          if (
            // Ch·ªçn cu·ªëi ·ªü gi·ªØa
            allBox[i - columns + 1]?.id === sign &&
            allBox[i + columns - 1]?.id === sign &&
            ((allBox[i - 2 * columns + 2]?.id === sign &&
              allBox[i + 2 * columns - 2]?.id !== notSign &&
              allBox[i - 3 * columns + 3]?.id !== notSign) ||
              (allBox[i - 2 * columns + 2]?.id !== notSign &&
                allBox[i + 2 * columns - 2]?.id === sign &&
                allBox[i + 3 * columns - 3]?.id !== notSign))
          ) {
            win = true;
          }
          // Ch·ªçn cu·ªëi ·ªü d∆∞·ªõi
          else if (
            allBox[i - columns + 1]?.id === sign &&
            allBox[i - 2 * columns + 2]?.id === sign &&
            allBox[i - 3 * columns + 3]?.id === sign &&
            allBox[i + columns - 1]?.id !== notSign &&
            allBox[i - 4 * columns + 4]?.id !== notSign
          ) {
            win = true;
          }
          // Ch·ªçn cu·ªëi ·ªü tr√™n
          else if (
            allBox[i + columns - 1]?.id === sign &&
            allBox[i + 2 * columns - 2]?.id === sign &&
            allBox[i + 3 * columns - 3]?.id === sign &&
            allBox[i - columns + 1]?.id === sign &&
            allBox[i + 4 * columns - 4]?.id !== notSign
          ) {
            win = true;
          }

          // Th√¥ng b√°o k·∫øt qu·∫£
          if (win) {
            playBox.classList.remove("show"); // Khi th·∫Øng ·∫©n play-box
            wonText.innerHTML = `Ng∆∞·ªùi ch∆°i <span>${sign}</span> gi√†nh chi·∫øn th·∫Øng üéâüéâüéâüéâüéâüéâüéâüéâüéâüéâüéâ`;
            resultBox.classList.add("show"); // Hi·ªán b·∫£ng k·∫øt qu·∫£
          } else if (count === rows * columns) {
            playBox.classList.remove("show"); // Khi th·∫Øng ·∫©n play-box
            wonText.innerHTML = `Ch∆∞a t√¨m th·∫•y ng∆∞·ªùi th·∫Øng r·ªìi üòäüòäüòäüòäüòäüòäüòäüòäüòäüòäüòä`;
            resultBox.classList.add("show"); // Hi·ªán b·∫£ng k·∫øt qu·∫£
          }
        };

        const handleCellClick = () => {
          count++;
          if (xTurn.classList.contains("active")) {
            allBox[i].innerHTML = '<i  class="fa-solid fa-xmark "></i>'; // Khi nh·∫•n v√†o √¥ th√¨ hi·ªán d·∫•u X
            allBox[i].setAttribute("id", "X"); // Th√™m id = "X"

            sign = "X";
            notSign = "O";

            xTurn.classList.remove("active"); // Khi X ƒë√°nh xong chuy·ªÉn thanh tr·∫°ng th√°i t·ª´ X ƒë√°nh
            oTurn.classList.add("active"); // sang O ƒë√°nh
          } else if (oTurn.classList.contains("active")) {
            allBox[i].innerHTML = '<i class="fa-sharp fa-solid fa-o"></i>'; // Khi nh·∫•n v√†o √¥ th√¨ hi·ªán d·∫•u O
            allBox[i].setAttribute("id", "O"); // Th√™m id = "O"

            sign = "O";
            notSign = "X";

            oTurn.classList.remove("active"); // Khi O ƒë√°nh xong chuy·ªÉn thanh tr·∫°ng th√°i t·ª´ O ƒë√°nh
            xTurn.classList.add("active"); // sang X ƒë√°nh
          }
          check();
          allBox[i].removeEventListener("click", handleCellClick); // Khi m·ªôt n√∫t ƒë√£ ƒë∆∞·ª£c ch·ªçn s·∫Ω kh√¥ng ch·ªçn l·∫°i ƒë∆∞·ª£c
        };

        allBox[i].addEventListener("click", handleCellClick);
      }
    } else
      alert("Nh·∫≠p sai ‚ùå M·ªùi nh·∫≠p l·∫°i ( 4 <= Row <= 14 v√† 4 <= Column <= 14)");
  } else alert("Nh·∫≠p sai ‚ùå. Row v√† Column ph·∫£i l√† s·ªë nguy√™n!");
};

// H√†m replay
const handleReplayClick = () => {
  resultBox.classList.remove("show");
  selectBox.classList.add("show");
  window.location.reload(); //Khi nh·∫•n n√∫t Replay s·∫Ω t·∫£i l·∫°i trang
};

document.querySelector(".btn-play").addEventListener("click", handlePlayClick);
replay.addEventListener("click", handleReplayClick);
